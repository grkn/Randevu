<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/data/jpa 
    http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
    http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/security/oauth2
    http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
    http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

    <context:property-placeholder location="classpath:/database.properties"/>
    <context:component-scan base-package="com.hizliyol"/>
    <aop:aspectj-autoproxy  proxy-target-class="true"/>

    <tx:annotation-driven/>

    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="view">
                    <bean class="com.hizliyol.core.scope.ViewScope"/>
                </entry>
            </map>
        </property>
    </bean>

    <security:http pattern="/oauth/token" use-expressions="true" create-session="stateless"
                   authentication-manager-ref="clientAuthenticationManager"
                   xmlns="http://www.springframework.org/schema/security">
        <security:intercept-url pattern="/**" method="GET" access="ROLE_DENY"/>
        <security:intercept-url pattern="/**" method="PUT" access="ROLE_DENY"/>
        <security:intercept-url pattern="/**" method="DELETE" access="ROLE_DENY"/>
        <security:intercept-url pattern="/oauth/token" access="permitAll"/>
        <security:anonymous enabled="false"/>
        <security:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request
            parameters -->
        <security:custom-filter ref="contentTypeFilter" before="BASIC_AUTH_FILTER"/>
        <security:custom-filter ref="clientCredentialsTokenEndpointFilter"
                                after="BASIC_AUTH_FILTER"/>


        <security:access-denied-handler ref="oauthAccessDeniedHandler"/>
        <security:csrf disabled="true"/>
    </security:http>


    <http pattern="/secure/**"
          create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/secure/users/post/**"
                       access="hasRole('ROLE_ROOT')"
                       method="POST" />
        <intercept-url pattern="/secure/users/get/**"
                       access="hasRole('ROLE_ROOT')"
                       method="GET" />

        <intercept-url pattern="/**" access="denyAll()" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:csrf disabled="true"/>
    </http>


    <oauth:resource-server id="resourceServerFilter"
                           resource-id="root" token-services-ref="tokenServices" />

    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="root" />
    </bean>


    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="root"/>
        <property name="typeName" value="Bearer"/>
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <security:authentication-manager id="clientAuthenticationManager"
                                     xmlns="http://www.springframework.org/schema/security">
        <security:authentication-provider user-service-ref="clientDetailsUserService"/>
    </security:authentication-manager>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
    </bean>

    <oauth:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token/>
        <oauth:client-credentials/>
        <oauth:password/>
    </oauth:authorization-server>


    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="root"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      scope="read,write" authorities="ROLE_ROOT"
                      access-token-validity="315360000"/>
        <oauth:client client-id="root"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="passw0rd!" scope="read,write" authorities="ROLE_ROOT" access-token-validity="315360000" />
    </oauth:client-details-service>



    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <constructor-arg ref="randevuDatasource" />
    </bean>

    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="tokenEnhancer" ref="tokenEnhancer" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <bean id="approvalStore"
          class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore" />
    </bean>

    <bean id="userApprovalHandler"
          class="com.hizliyol.core.security.UserApprovalHandler">
        <property name="approvalStore" ref="approvalStore" />
        <property name="clientDetailsService" ref="clientDetails" />
        <property name="requestFactory" ref="requestFactory" />
    </bean>

    <bean id="tokenEnhancer"
          class="com.hizliyol.core.security.SparklrTokenEnhancer" />


    <bean id="requestFactory"
          class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg name="clientDetailsService" ref="clientDetails" />
    </bean>


    <security:http security="none" pattern="/resources/*"/>
    <security:http security="none" pattern="/root/resources/*"/>
    <security:http security="none" pattern="/admin/resources/*"/>
    <security:http security="none" pattern="/javax.faces.resource/*"/>



    <security:http use-expressions="true"
                   create-session="always" authentication-manager-ref="authManager">
        <security:csrf/>
        <security:intercept-url pattern="/logout"
                                access="permitAll"/>

        <security:intercept-url pattern="/login.xhtml"
                                access="permitAll"/>
        <security:intercept-url pattern="/admin/*"
                                access="hasAnyRole('ROLE_ADMIN','ROLE_ROOT')"/>
        <security:intercept-url pattern="/root/*"
                                access="hasRole('ROLE_ROOT')"/>
        <security:intercept-url pattern="/**"
                                access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_ROOT')"/>
        <security:logout logout-success-url="/login.xhtml?logout"
                         logout-url="/logout" invalidate-session="true"/>
        <security:form-login authentication-failure-url="/login.xhtml?error"
                             authentication-success-forward-url="/index.xhtml" login-page="/login.xhtml"
                             login-processing-url="/login" password-parameter="password" default-target-url="index.xhtml"
                             username-parameter="username"/>

    </security:http>

    <security:authentication-manager id="authManager">
        <security:authentication-provider ref="customAuthenticationProvider"/>
    </security:authentication-manager>


    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg value="11"/>
    </bean>

    <!-- Employee DB data source. -->
    <bean id="randevuDatasource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="maxStatements" value="${jdbc.maxStatements}"/>
        <property name="testConnectionOnCheckout" value="${jdbc.testConnection}"/>
    </bean>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="randevuDatasource"/>
        <property name="packagesToScan" value="com.hizliyol.core.entity"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="persistenceExceptionTranslationPostProcessor"
          class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <jpa:repositories base-package="com.hizliyol.core.data"/>
</beans>